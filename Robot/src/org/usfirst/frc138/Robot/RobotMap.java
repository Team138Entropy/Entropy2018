// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc138.Robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX drivetrainfrontLeftTalon;
    public static WPI_TalonSRX drivetrainbackLeftTalon;
    public static SpeedControllerGroup drivetrainleft;
    public static WPI_TalonSRX drivetrainfrontRightTalon;
    public static WPI_TalonSRX drivetrainbackRightTalon;
    public static SpeedControllerGroup drivetrainright;
    public static DifferentialDrive drivetraindriveTrain;
    public static AnalogPotentiometer elevatorPot;
    public static SpeedController elevatorSpeedController1;
    public static AnalogPotentiometer wristPot;
    public static SpeedController wristSpeedController1;
    public static DigitalInput clawLimitSwitch;
    public static Servo clawServo;
    public static Encoder sensorsLeftEncoder;
    public static Encoder sensorsRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainfrontLeftTalon = new WPI_TalonSRX(2);
        
        
        drivetrainbackLeftTalon = new WPI_TalonSRX(3);
        
        
        drivetrainleft = new SpeedControllerGroup(drivetrainfrontLeftTalon, drivetrainbackLeftTalon  );
        LiveWindow.addActuator("Drivetrain", "left", drivetrainleft);
        
        drivetrainfrontRightTalon = new WPI_TalonSRX(4);
        
        
        drivetrainbackRightTalon = new WPI_TalonSRX(5);
        
        
        drivetrainright = new SpeedControllerGroup(drivetrainfrontRightTalon, drivetrainbackRightTalon  );
        LiveWindow.addActuator("Drivetrain", "right", drivetrainright);
        
        drivetraindriveTrain = new DifferentialDrive(drivetrainleft, drivetrainright);
        LiveWindow.addActuator("Drivetrain", "driveTrain", drivetraindriveTrain);
        drivetraindriveTrain.setSafetyEnabled(true);
        drivetraindriveTrain.setExpiration(0.1);
        drivetraindriveTrain.setMaxOutput(1.0);

        elevatorPot = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Elevator", "Pot", elevatorPot);
        
        elevatorSpeedController1 = new Talon(2);
        LiveWindow.addActuator("Elevator", "Speed Controller 1", (Talon) elevatorSpeedController1);
        elevatorSpeedController1.setInverted(false);
        wristPot = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Wrist", "Pot", wristPot);
        
        wristSpeedController1 = new Talon(3);
        LiveWindow.addActuator("Wrist", "Speed Controller 1", (Talon) wristSpeedController1);
        wristSpeedController1.setInverted(false);
        clawLimitSwitch = new DigitalInput(0);
        LiveWindow.addSensor("Claw", "Limit Switch", clawLimitSwitch);
        
        clawServo = new Servo(4);
        LiveWindow.addActuator("Claw", "Servo", clawServo);
        
        sensorsLeftEncoder = new Encoder(1, 2, false, EncodingType.k4X);
        LiveWindow.addSensor("Sensors", "LeftEncoder", sensorsLeftEncoder);
        sensorsLeftEncoder.setDistancePerPulse(1.0);
        sensorsLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        sensorsRightEncoder = new Encoder(3, 4, false, EncodingType.k4X);
        LiveWindow.addSensor("Sensors", "RightEncoder", sensorsRightEncoder);
        sensorsRightEncoder.setDistancePerPulse(1.0);
        sensorsRightEncoder.setPIDSourceType(PIDSourceType.kRate);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
